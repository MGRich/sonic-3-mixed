object 0x04;

event Create() {
    Active = true;
    Priority = false;

    W = 48;
    H = 32;

    var f:int = -1;
    var Allotted:int = 60 * 5;

    var Separation:int = 2;
    var Sections:int = 8;
    var Vsect:int = 2;

    SolidTop = true;
    SolidCustomized = true;
    Scene.AddSelfToRegistry(this, "Solid");

    if (Scene.ZoneID == 1) { // AIZ
        W = 0x30;
        H = 0x20;
        if (Scene.Act == 2)
            H = 0x18;
        CurrentAnimation = 8;
        Frame = 0;
    }
    else if (Scene.ZoneID == 2) { // HCZ

    }
    else if (Scene.ZoneID == 3) { // MGZ

    }
    else if (Scene.ZoneID == 5) {

    }
    else if (Scene.ZoneID == 6) {

    }

    W <<= 1;
    H <<= 1;
}

event Update() {
    SolidTop = true;
    if (f > -1 && f <= Allotted) {
        SolidTop = false;
        Solid = false;
        if (f == Allotted)
            Break();
    }
    if (f > 0)
        f -= 1;
}

event Break() {
    Sound.Play(Sound.SFX_COLLAPSE);

    local x:int = X - W / 2 + 8;
    local y:int = Y - H / 2 + 8;
    local w:int = W >> 4;
    local h:int = H >> 4;
    local left:int = Sprite.Animations[CurrentAnimation].Frames[Frame].X;
    local top:int = Sprite.Animations[CurrentAnimation].Frames[Frame].Y;

    if (Scene.Act == 2) {
        x = X - W / 2 + 8;
        y = Y - 0x40 / 2 + 8;
        w = W >> 4;
        h = 0x40 >> 4;
    }

    local side:bool = FlipX;

    if (side) {
        for (i:int = 0; i < w; i++) {
            for (j:int = 0; j < h; j++) {
                Scene.AddMovingSprite(Sprite,
                    x + i * 0x10, y + j * 0x10,
                    left + (w - 1 - i) * 0x10, top + j * 0x10,
                    0x10, 0x10,
                    -8, -8, side, false, 0, 0, 0x70, (h - 1 - j) * 2 + i * h * 2);
            }
        }
    }
    else {
        for (i:int = 0; i < w; i++) {
            for (j:int = 0; j < h; j++) {
                Scene.AddMovingSprite(Sprite,
                    x + i * 0x10, y + j * 0x10,
                    left + i * 0x10, top + j * 0x10,
                    0x10, 0x10,
                    -8, -8, side, false, 0, 0, 0x70, (h - 1 - j) * 2 + (w - 1 - i) * h * 2);
            }
        }
    }
}

event OnLeaveScreen() : int {
    f = -1;
    return 1;
}

event Render(CamX:int, CamY:int) {
    if (!SolidTop)
        return;

    if (Scene.ZoneID == 1) {
        G.DrawSprite(Sprite, CurrentAnimation, Frame, X - CamX, Y - CamY, 0, FlipX);
    }
    else {
        G.DrawRectangle(X - W / 2 - CamX, Y - H / 2 - CamY, W, H, 0xFF0000);
    }


    //G.DrawSprite(Scene.TileSprite, 0, 0x8C, 8 + X - CamX + (0), 8 + Y - CamY + (-16), 0, IE_NOFLIP);

    //G.DrawSprite(Scene.TileSprite, 0, 0x8E, 8 + X - CamX + (0), 8 + Y - CamY + (0), 0, IE_NOFLIP);

}

event CustomSolidityCheck(probeX:int, probeY:int, PlayerID:int, checkJumpThrough:int) : int {
    if (!checkJumpThrough)
        return 0;

    if (!SolidTop)
        return 0;

    if (Scene.ZoneID == 1) {
        if (!FlipX) {
            if (probeX >= X - W / 2 &&
                probeY >= Y - H / 2 &&
                probeX <  X &&
                probeY <  Y + H / 2) {
                if (f == -1 && Scene.Players[PlayerID].Ground && Scene.Players[PlayerID].AngleMode == 0 && Scene.Players[PlayerID].EZY < Y - H / 2) {
                    f = 60 + Allotted;
                    Priority = true;
                }
                return 1;
            }
            if (probeX >= X &&
                probeY >= Y - H / 2 + (probeX - X) / 3 &&
                probeX <  X + W / 2 &&
                probeY <  Y + H / 2) {
                if (f == -1 && Scene.Players[PlayerID].Ground && Scene.Players[PlayerID].AngleMode == 0 && Scene.Players[PlayerID].EZY < Y - H / 2) {
                    f = 60 + Allotted;
                    Priority = true;
                }
                return 1;
            }
        }
        else if (FlipX) {
            if (probeX >= X &&
                probeY >= Y - H / 2 &&
                probeX <  X + W / 2 &&
                probeY <  Y + H / 2) {
                if (f == -1 && Scene.Players[PlayerID].Ground && Scene.Players[PlayerID].AngleMode == 0 && Scene.Players[PlayerID].EZY < Y - H / 2) {
                    f = 60 + Allotted;
                    Priority = true;
                }
                return 1;
            }
            if (probeX >= X - W / 2 &&
                probeY >= Y - H / 2 + (X - probeX) / 3 &&
                probeX <  X &&
                probeY <  Y + H / 2) {
                if (f == -1 && Scene.Players[PlayerID].Ground && Scene.Players[PlayerID].AngleMode == 0 && Scene.Players[PlayerID].EZY < Y - H / 2) {
                    f = 60 + Allotted;
                    Priority = true;
                }
                return 1;
            }
        }
    }

    return 0;
}
